---
description: 
globs: 
alwaysApply: true
---
# NextCRM 项目开发规则

## 多语言（i18n）要求
- 所有用户可见文本必须通过多语言字典（如 [locales/en.json](mdc:locales/en.json)）管理，禁止硬编码。
- 多语言 key 命名需分模块、页面、组件分组，结构清晰，保持不同语言文件 key 一致。
- 使用 next-intl 进行国际化，页面通过 `NextIntlClientProvider` 提供多语言上下文。
- 支持多语言切换，locale 作为路由前缀（如 `/en/`、`/cz/`）。

## Next.js 相关要求
- 遵循 Next.js 15+ 的 App Router 目录结构，页面、布局、API 路由分别放在 `app/` 下。
- 页面组件必须为异步函数（async function），支持服务端渲染。
- 使用 `Metadata` 对象和 `generateMetadata` 方法为页面设置 SEO 元信息。
- 静态资源放在 `public/`，图片等通过 `/public` 路径引用。
- 环境变量通过 `process.env` 访问，敏感信息仅在服务端使用。
- 推荐使用 `next-auth` 进行认证，API 路由统一放在 `app/api/`。

## React 相关要求
- 组件命名采用大驼峰（PascalCase），文件名与组件名一致。
- 复用组件放在 `components/`，页面专用组件放在对应页面目录下。
- 使用 TypeScript，所有 props 必须显式声明类型。
- 使用函数组件和 hooks，禁止使用 class 组件。
- 状态管理优先使用 React Context、Zustand 或 Redux，避免 prop drilling。
- UI 组件优先使用 shadcn/ui、Tailwind CSS。

## Prisma 相关要求
- 数据库 schema 定义在 [prisma/schema.prisma](mdc:prisma/schema.prisma)，所有模型、字段、关系需加注释说明。
- 使用 MongoDB 作为数据库，`provider = "mongodb"`。
- 所有模型名、字段名采用下划线分隔（snake_case），如 `crm_Accounts`、`created_at`。
- 通过 `prisma generate` 生成客户端，`prismadb` 封装在 [lib/prisma.ts](mdc:lib/prisma.ts)。
- 变更 schema 后需同步执行 `prisma db push` 并更新初始数据。

## 数据库结构定义
- 主要业务模型有：`crm_Accounts`、`crm_Leads`、`crm_Opportunities`、`crm_Contacts`、`crm_Contracts` 等。
- 所有模型主键为 `id`，类型为 `String`，使用 MongoDB ObjectId。
- 关联关系通过 ObjectId 字段和 Prisma 的 @relation 实现。
- 枚举类型如 `crm_Lead_Status`、`crm_Opportunity_Status` 用于状态管理。
- 字段命名统一采用下划线分隔，布尔类型以 is/has 开头。

## 命名规范
- 目录、文件、变量、函数、类型、接口、枚举等均需语义化命名。
- 组件、类型、枚举采用大驼峰（PascalCase），变量、函数、字段采用小驼峰（camelCase）或下划线（snake_case，数据库专用）。
- 多语言 key 采用模块名+功能名分组，如 `DashboardPage.containerTitle`。
- API 路由、服务、工具函数等文件名统一小写，单词间用中划线或下划线分隔。

## 其他注意事项
- 严格使用 TypeScript，避免 any 类型。
- 代码风格遵循 ESLint + Prettier 规范。
- UI 设计遵循 shadcn/ui 和 Tailwind CSS 的最佳实践。
- 参考官方架构与设计原则：[Architecture guide](mdc:https:/docs.nextcrm.io/docs/architecture-guide)、[Design principles](mdc:https:/docs.nextcrm.io/docs/design-principles)。
- 详细开发流程、环境变量、部署等见 [README.md](mdc:README.md)。

